■■■ AOP(Aspect Oriented Programming) ■■■

※ 공통의 관심 사항을 적용해서 발생하는 의존 관계의 복잡성과
   코드 중복을 해소해 주는 프로그래밍 기법.

○ AOP 개념
   주 업무를 실행할 때 보조적인 업무(주 업무 실행 시간 체크, 로그 기록 등)가
   진행되어야 한다.
   만약, 주 업무가 여러 개이고 동일한 보조 업무가 진행되어야 한다면
   보조 업무 부분은 중복된 코드가 될 수 밖에 없다.
   이런 중복 요소를 제거하고 보조 업무를 보다 독립적인 방법으로 실행할 수 있도록
   구성하는 것을 AOP 기법이라고 한다.

○ AOP 관련 주요 용어
   - 보조 업무(cross-cutting concern)
     주 업무 실행 시 발생하는 보조적인 업무.
     주 업무와 분리 및 결합이 쉽게 될 수 있도록 만들어야 한다.
   - 주 업무(core concern)
     핵심적인 기능을 수행하는 부분.
     사용자의 요청에 대한 기본적인 수행 및 결과 반환을 해야한다.
   - Advice
     언제 어떤 공통 관심 기능(보조 업무, cross-cutting-concern)을	// '공통'이라는 말 들어가면 보조 업무
     적용할지 결정하는 방법.
     Before Advice, After Advice, Around Advice 등이 있다.
     * Before Advice
       보조 업무가 주 업무 실행 전에 실행되는 경우
     * After Advice
       보조 업무가 주 업무 실행 후에 실행되는 경우
     * Around Advice
       보조 업무가 주 업무 실행 전과 후에 실행되는 경우

   - proxy
     주 업무를 실행하는 객체와 동일한 모양을 가진 가짜 객체.
     사용자가 주 업무를 실행하는 객체를 찾아가는 것이 아니라,
     proxy 를 찾아가도록 지정하게 된다.
     proxy 내부에서 보조 업무를 실행한 후, 주 업무를 호출하도록 하면
     외부에서 볼 때 주 업무를 실행하는 것과 같은 결과가 나오도록 할 수 있다.

   - joinpoint
     proxy 내부에서 주 업무를 호출하는 경우에 특정 지점에만 호출되도록 할 수 있다.

   - weaving
     advice 를 주 업무에 적용하는 과정을 부르는 명칭

   - aspect
     여러 주 업무 객체에 공통으로 적용되는 공통 관심 사항(보조 업무)을
     aspect 라고 한다.

○ AOP 진행 순서

   사용자		프록시		보조 업무			주 업무
   (client)		(proxy)		(cross-cutting-concern)		(core concern)

    ○---------------------------------------------------------------------->○
 
    ●----------①-------->●

                           ●------②------>●

			   ●-------------------------③--------------------->●

                    	   ●<------------------------④---------------------●

		 	   ●------⑤------>●

    ○<----------------------------------------------------------------------○
 
    ●<---------⑥---------●

    ① 사용자 proxy 객체에 접근한다.
       사용자 입장에서는 proxy 객체가 주 업무(core concern) 객체와 동일하게 생각한다.

    ② proxy 객체 내부에서 보조 업무(cross-cutting-concern)를 진행한다.
       주 업무 실행 전에 수행되는 보조 업무는
       Before Advice, Around Advice 가 있다.

    ③ proxy 객체 내부에서 주 업무를 호출한다
       주 업무가 진행된다.
   
    ④ 주 업무가 결과값을 리턴한다.

    ⑤ proxy 객체 내부에서 보조 업무(cross-cutting concern)를 진행한다.
       주 업무 실행 후에 수행되는 보조 업무는
       After Advice, Around Advice 가 있다.

    ⑥ 사용자에게 결과값을 리턴한다.


---------------------------------------------------------------------
■■■ AOP 개념 실습 01 (AOP 기법을 적용하기 전) ■■■

○ 실습 성격 및 주요 사항
   1. 콘솔 프로젝트
   2. 기본적인 산술 연산 처리
   3. AOP 기법을 사용하지 않고 보조 업무(시간 측정, 로그 처리)를
      적용시켜보는 실습을 진행한다.
   4. JAVA Project 생성 → SpringPrj05
   5. 로그 및 스톱워치 사용을 위해 jar 파일을 등록한다.

○ 등록해야 할 jar 파일
   경로 1 : C:\s-f-with-docs\dist
    	-파일 1 : org.springframework.core-3.0.2.RELEASE.jar

   경로 2 : C:\s-f-dependencies\org.apache.commons\com.springsource.org.apache.commons.logging\1.1.1
        -파일 2 : com.springsource.org.apache.commons.logging-1.1.1.jar

○ 물리적 파일 구성
   1. Calculator.java		→ 인터페이스
   2. CalculatorImpl.java	→ 클래스. 주업무, 보조업무 적용.
   3. Main.java			→ 클래스. main() 메소드가 포함된 테스트 클래스.



---------------------------------------------------------------------
■■■ AOP 개념 실습 02 (AOP 기법을 적용) ■■■

○ 실습 성격 및 주요 사항
   1. 콘솔 프로젝트
   2. 기본적인 산술 연산 처리
   3. AOP 기법을 사용하지 않고 보조 업무(시간 측정, 로그 처리)를
      적용시켜보는 실습을 진행한다.
   4. JAVA Project 생성 → SpringPrj06
   5. 로그 및 스톱워치 사용을 위해 jar 파일을 등록한다.

○ 등록해야 할 jar 파일
   경로 1 : C:\s-f-with-docs\dist
    	-파일 1 : org.springframework.core-3.0.2.RELEASE.jar

   경로 2 : C:\s-f-dependencies\org.apache.commons\com.springsource.org.apache.commons.logging\1.1.1
        -파일 2 : com.springsource.org.apache.commons.logging-1.1.1.jar

○ 물리적 파일 구성
   1. Calculator.java		→ 인터페이스(기존 소스코드 그대로 활용)
   2. CalculatorProxty.java     → 프록시 클래스
				   보조 업무 적용 및 주 업무 호출 과정
   3. CalculatorImpl.java	→ 클래스. 주업무.
   4. Main.java			→ 클래스. main() 메소드가 포함된 테스트 클래스.


---------------------------------------------------------------------
■■■ AOP 개념 실습 03 (AOP 기법을 적용) ■■■

○ 실습 성격 및 주요 사항
   1. 콘솔 프로젝트
   2. 기본적인 산술 연산 처리
   3. AOP 기법을 사용하지 않고 보조 업무(시간 측정, 로그 처리)를
      적용시켜보는 실습을 진행한다.
   4. JAVA Project 생성 → SpringPrj07
   5. 로그 및 스톱워치 사용을 위해 jar 파일을 등록한다.

○ 등록해야 할 jar 파일
   경로 1 : C:\s-f-with-docs\dist
    	-파일 1 : org.springframework.core-3.0.2.RELEASE.jar

   경로 2 : C:\s-f-dependencies\org.apache.commons\com.springsource.org.apache.commons.logging\1.1.1
        -파일 2 : com.springsource.org.apache.commons.logging-1.1.1.jar

○ 물리적 파일 구성
   1. Calculator.java		→ 인터페이스(기존 소스코드 그대로 활용)

   2. CalculatorImpl.java	→ 클래스. 주업무, 보조업무 적용.
   3. Main.java			→ 클래스. main() 메소드가 포함된 테스트 클래스.